#!/bin/bash

CLASH_BIN="/usr/local/bin/mihomo"
CLASH_ETC="/etc/mihomo"
CLASH_CONFIG="${CLASH_ETC}/config.yaml"
CLASH_LOG="${CLASH_ETC}/clash.log"

GEOIP_FILE="${CLASH_ETC}/GeoIP.dat"
GEOSITE_FILE="${CLASH_ETC}/GeoSite.dat"

GEOIP_URL="https://cdn.jsdelivr.net/gh/Cornfy/geoip@release/geoip-asn.dat"
GEOSITE_URL="https://cdn.jsdelivr.net/gh/Loyalsoldier/v2ray-rules-dat@release/geosite.dat"

# Check if you are running as root
if [[ $EUID -ne 0 ]]; then
	echo "ERROR: Please run this script as root!"
	exit 1
fi

# Function to handle errors and exit
handleError() {
	echo -e "ERROR: $1"
	exit 1
}

# Function to detect system information
detectSystemInfo() {
	# Get the system name and architecture
	local UNAME_S=$(uname -s)
	local UNAME_M=$(uname -m)

	echo "Checking system infomation..."

	case "$UNAME_S" in
		Linux)
			SYSTEM=$( [ -f "/system/bin/getprop" ] && echo "android" || echo "linux" )
			;;
		*)
			handleError "Unsupported system: $UNAME_S"
			;;
	esac

	case "$SYSTEM" in
		android)
			AARCH=$( [ "$UNAME_M" = "armv7l" ] && echo "armv7" || echo "arm64-v8" )
			;;
		linux)
			AARCH=$( [ "$UNAME_M" = "x86_64" ] && echo "amd64-v1" || echo "386" )
			;;
		*)
			handleError "Unsupported architecture: $UNAME_M"
			;;
	esac
}

startClash() {
	pidof "$CLASH_BIN" > /dev/null && \
	{
		echo "Clash is already running."
		return
	}

	"$CLASH_BIN" -d "$CLASH_ETC" -t -f "$CLASH_CONFIG" || handleError "Invalid config file."

	nohup "$CLASH_BIN" -d "$CLASH_ETC" > "$CLASH_LOG" 2>&1 &
	echo "Clash STARTED."
}

reloadConfig() {
	local CLASH_API="http://127.0.0.1:9090"
	local response=$(curl -X PUT -s -o /dev/null -w "%{http_code}" -H "Content-Type: application/json" -d "{\"path\": \"$CLASH_CONFIG\"}" "${CLASH_API}/configs")

	case "$response" in
		200|204)
			echo "Config reloaded."
			;;
		*)
			handleError "Failed to reload config. HTTP response code: $response"
			;;
	esac
}

killClash() {
	pidof "$CLASH_BIN" > /dev/null && \
	{
		pkill -f "$CLASH_BIN"
		cat /dev/null > "$CLASH_LOG"
		echo "Clash STOPPED."
	} || \
		echo "Clash is not running."
}

showClashLogs() {
	cat "$CLASH_LOG"
}

updateClashKernel() {
	# Get system information
	detectSystemInfo

	# Get the latest version
	local LATEST=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | grep '"tag_name":' | cut -d '"' -f 4)
	local URL="https://github.com/MetaCubeX/mihomo/releases/download/$LATEST/mihomo-$SYSTEM-$AARCH-$LATEST.gz"
    
	# Ensure the temporary directory exists
	mkdir -p "${CLASH_ETC}/tmp"

	# Download the latest kernel
	curl -L "$URL" -o "${CLASH_ETC}/tmp/mihomo-$SYSTEM-$AARCH-$LATEST.gz" || handleError "Failed to download Clash kernel."

	# Decompress the downloaded file
	gzip -d -c "${CLASH_ETC}/tmp/mihomo-$SYSTEM-$AARCH-$LATEST.gz" > "${CLASH_ETC}/tmp/mihomo-$SYSTEM-$AARCH-$LATEST" || handleError "Failed to decompress the downloaded file."

	# Replace the old kernel
	mv "${CLASH_ETC}/tmp/mihomo-$SYSTEM-$AARCH-$LATEST" "$CLASH_BIN" || handleError "Failed to replace the old kernel."
	chmod +x "$CLASH_BIN" || handleError "Failed to make the new kernel executable."

	# Clean up old .gz files, keeping the latest one
	find "${CLASH_ETC}/tmp" -type f -name "mihomo-$SYSTEM-$AARCH-*.gz" ! -name "mihomo-$SYSTEM-$AARCH-$LATEST.gz" -delete

	echo "Clash kernel updated to $LATEST and will be used when restarted."
}

updateGeoX() {
	# Ensure the tmp directory exists
	mkdir -p "${CLASH_ETC}/tmp"

	# Temporary file paths
	local TMP_GEOIP_FILE="${CLASH_ETC}/tmp/GeoIP.dat"
	local TMP_GEOSITE_FILE="${CLASH_ETC}/tmp/GeoSite.dat"

	# Download the latest GeoIP.dat to a temporary file
	echo "Downloading GeoIP.dat..."
	curl -L "$GEOIP_URL" -o "$TMP_GEOIP_FILE" && [ -s "$TMP_GEOIP_FILE" ] || handleError "Failed to download or verify GeoIP.dat."

	# Download the latest GeoSite.dat to a temporary file
	echo "Downloading GeoSite.dat..."
	curl -L "$GEOSITE_URL" -o "$TMP_GEOSITE_FILE" && [ -s "$TMP_GEOSITE_FILE" ] || handleError "Failed to download or verify GeoSite.dat."

	# Replace the old files with the new ones
	echo "Updating GeoIP.dat..."
	cp "$TMP_GEOIP_FILE" "$GEOIP_FILE" || handleError "Failed to update GeoIP.dat."

	echo "Updating GeoSite.dat..."
	cp "$TMP_GEOSITE_FILE" "$GEOSITE_FILE" || handleError "Failed to update GeoSite.dat."

	echo "GeoIP.dat and GeoSite.dat have been updated successfully."
}

updateMetaCubeXD() {
	# Ensure the ui directory exists
	mkdir -p "${CLASH_ETC}/ui"

	# Check if the repository already exists and update it, otherwise clone it
	[ -d "${CLASH_ETC}/ui/.git" ] && \
	{ 
		echo "Updating existing MetaCubeXD repository..."
		git -C "${CLASH_ETC}/ui" pull --rebase || handleError "Failed to update MetaCubeXD repository."
	} || \
	{
		echo "Cloning MetaCubeXD repository..."
		git clone https://github.com/metacubex/metacubexd.git -b gh-pages "${CLASH_ETC}/ui" || handleError "Failed to clone MetaCubeXD repository."
	}

	echo "MetaCubeXD repository is up to date."
}

# Main script
case "$1" in
	-s | --start) startClash ;;
	-r | --reload) reloadConfig ;;
	-k | --kill) killClash ;;
	-l | --log) showClashLogs ;;
	-u | --update) updateClashKernel ;;
	-g | --geox) updateGeoX ;;
	-m | --metacubexd) updateMetaCubeXD ;;
	*)
		echo "Usage: $0 [option]"
		echo "Options:"
		echo "  -s | --start		Start Clash"
		echo "  -r | --reload		Reload Config"
		echo "  -k | --kill		Stop Clash"
		echo "  -l | --log		Show Clash Logs"
		echo "  -u | --update		Update Clash Kernel"
		echo "  -g | --geox		Update GeoX"
		echo "  -m | --metacubexd	Update MetaCubeXD"
		exit 1
		;;
esac
